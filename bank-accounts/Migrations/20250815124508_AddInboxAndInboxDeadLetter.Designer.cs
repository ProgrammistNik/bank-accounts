// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bank_accounts.Account.Data;

#nullable disable

namespace bank_accounts.Migrations
{
    [DbContext(typeof(BankAccountsDbContext))]
    [Migration("20250815124508_AddInboxAndInboxDeadLetter")]
    partial class AddInboxAndInboxDeadLetter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bank_accounts.Account.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(38, 10)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "hash");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("bank_accounts.Account.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CommitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CounterpartyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommitedAt");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CommitedAt"), "btree");

                    b.HasIndex("AccountId", "CommitedAt");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("bank_accounts.RabbitMQ.Models.Inbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("bank_accounts.RabbitMQ.Models.InboxDeadLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InboxDeadLetters");
                });

            modelBuilder.Entity("bank_accounts.RabbitMQ.Models.Outbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Outboxes");
                });

            modelBuilder.Entity("bank_accounts.Account.Models.Transaction", b =>
                {
                    b.HasOne("bank_accounts.Account.Models.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bank_accounts.RabbitMQ.Models.Inbox", b =>
                {
                    b.OwnsOne("bank_accounts.RabbitMQ.Models.Meta", "Meta", b1 =>
                        {
                            b1.Property<Guid>("InboxId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CausationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CorrelationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("InboxId");

                            b1.ToTable("Inboxes");

                            b1.WithOwner()
                                .HasForeignKey("InboxId");
                        });

                    b.Navigation("Meta")
                        .IsRequired();
                });

            modelBuilder.Entity("bank_accounts.RabbitMQ.Models.InboxDeadLetter", b =>
                {
                    b.OwnsOne("bank_accounts.RabbitMQ.Models.Meta", "Meta", b1 =>
                        {
                            b1.Property<Guid>("InboxDeadLetterId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CausationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CorrelationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("InboxDeadLetterId");

                            b1.ToTable("InboxDeadLetters");

                            b1.WithOwner()
                                .HasForeignKey("InboxDeadLetterId");
                        });

                    b.Navigation("Meta")
                        .IsRequired();
                });

            modelBuilder.Entity("bank_accounts.RabbitMQ.Models.Outbox", b =>
                {
                    b.OwnsOne("bank_accounts.RabbitMQ.Models.Meta", "Meta", b1 =>
                        {
                            b1.Property<Guid>("OutboxId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CausationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CorrelationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OutboxId");

                            b1.ToTable("Outboxes");

                            b1.WithOwner()
                                .HasForeignKey("OutboxId");
                        });

                    b.Navigation("Meta")
                        .IsRequired();
                });

            modelBuilder.Entity("bank_accounts.Account.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
